'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bindAll2 = require('lodash/bindAll');

var _bindAll3 = _interopRequireDefault(_bindAll2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _document = require('part:@sanity/base/datastore/document');

var _document2 = _interopRequireDefault(_document);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// todo: make configurable
var DEFAULT_PROPS_MAPPING = {
  result: 'result',
  error: 'error',
  complete: 'complete'
};

var QueryContainer = function (_React$Component) {
  _inherits(QueryContainer, _React$Component);

  _createClass(QueryContainer, null, [{
    key: 'getInitialState',
    value: function getInitialState() {
      return {
        result: null,
        complete: false,
        error: false
      };
    }
  }]);

  function QueryContainer() {
    var _ref;

    _classCallCheck(this, QueryContainer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = QueryContainer.__proto__ || Object.getPrototypeOf(QueryContainer)).call.apply(_ref, [this].concat(args)));

    _this.state = QueryContainer.getInitialState();

    (0, _bindAll3.default)(_this, ['next', 'error', 'complete']);
    return _this;
  }

  _createClass(QueryContainer, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.subscribe(this.props.query, this.props.params);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unsubscribe();
    }
  }, {
    key: 'subscribe',
    value: function subscribe(query, params) {
      this._subscription = _document2.default.query(query, params).subscribe(this);
    }
  }, {
    key: 'unsubscribe',
    value: function unsubscribe() {
      this._subscription.unsubscribe();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var sameQuery = nextProps.query === this.props.query;
      var sameParams = nextProps.params === this.props.params;

      if (!sameQuery || !sameParams) {
        this.unsubscribe();
        this.subscribe(nextProps.query, nextProps.params);
        this.setState(QueryContainer.getInitialState());
      }
    }
  }, {
    key: 'next',
    value: function next(result) {
      this.setState({ result: result });
    }
  }, {
    key: 'error',
    value: function error(_error) {
      console.error(_error); // @todo make sure some kind of error dialog is shown, somewhere
      this.setState({ error: _error });
    }
  }, {
    key: 'complete',
    value: function complete() {
      this.setState({ complete: true });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.cloneElement(_react2.default.Children.only(this.props.children), this.props.mapFn(this.state));
    }
  }]);

  return QueryContainer;
}(_react2.default.Component);

QueryContainer.propTypes = {
  query: _react.PropTypes.string,
  mapFn: _react.PropTypes.func,
  children: _react.PropTypes.element,
  params: _react.PropTypes.object
};
QueryContainer.defaultProps = {
  mapFn: function mapFn(props) {
    return props;
  }
};
exports.default = QueryContainer;
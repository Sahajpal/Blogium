'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = createLocationStore;

var _SanityStoreObservable = require('../utils/SanityStoreObservable');

var _SanityStoreObservable2 = _interopRequireDefault(_SanityStoreObservable);

var _Location = require('../utils/Location');

var _Location2 = _interopRequireDefault(_Location);

var _history = require('history');

var _createActions = require('../utils/createActions');

var _createActions2 = _interopRequireDefault(_createActions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var noop = function noop() {}; // eslint-disable-line no-empty-function
var history = (0, _history.createHistory)();

function readLocation() {
  return _Location2.default.parse(document.location.href);
}

var interceptors = [];

function navigate(nextUrl, options) {
  if (interceptors.length > 0) {
    var _ret = function () {
      var cancelled = false;
      var nextNavigation = {
        nextUrl: nextUrl,
        cancel: function cancel() {
          cancelled = true;
        }
      };

      interceptors.some(function (interceptor) {
        interceptor(nextNavigation);
        return !cancelled;
      });

      if (cancelled) {
        return {
          v: { progress: new _SanityStoreObservable2.default(noop) }
        };
      }
    }();

    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
  }

  if (options.replace) {
    history.replace(nextUrl);
  } else {
    history.push(nextUrl);
  }
  return { progress: new _SanityStoreObservable2.default(noop) };
}

function createLocationStore() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var eventStream = new _SanityStoreObservable2.default(function (observer) {
    var firstEmitted = false;
    return history.listen(function () {
      firstEmitted = true;
      observer.next({
        type: firstEmitted ? 'change' : 'snapshot',
        location: readLocation()
      });
    });
  });

  return {
    state: eventStream,
    intercept: function intercept(interceptor) {
      interceptors.push(interceptor);
      return function () {
        interceptors.splice(interceptors.indexOf(interceptor), 1);
      };
    },

    actions: (0, _createActions2.default)({
      navigate: navigate
    })
  };
}
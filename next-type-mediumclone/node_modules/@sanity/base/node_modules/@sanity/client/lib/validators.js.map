{"version":3,"sources":["../src/validators.js"],"names":["VALID_ASSET_TYPES","exports","dataset","test","name","Error","projectId","id","validateAssetType","indexOf","type","join","validateObject","op","val","Array","isArray","validateDocumentId","hasDataset","config","promise","Promise","resolve"],"mappings":";;;;AAAA,IAAMA,oBAAoB,CAAC,OAAD,EAAU,MAAV,CAA1B;;AAEAC,QAAQC,OAAR,GAAkB,gBAAQ;AACxB,MAAI,CAAC,iBAAiBC,IAAjB,CAAsBC,IAAtB,CAAL,EAAkC;AAChC,UAAM,IAAIC,KAAJ,CAAU,iFAAV,CAAN;AACD;AACF,CAJD;;AAMAJ,QAAQK,SAAR,GAAoB,cAAM;AACxB,MAAI,CAAC,gBAAgBH,IAAhB,CAAqBI,EAArB,CAAL,EAA+B;AAC7B,UAAM,IAAIF,KAAJ,CAAU,uDAAV,CAAN;AACD;AACF,CAJD;;AAMAJ,QAAQO,iBAAR,GAA4B,gBAAQ;AAClC,MAAIR,kBAAkBS,OAAlB,CAA0BC,IAA1B,MAAoC,CAAC,CAAzC,EAA4C;AAC1C,UAAM,IAAIL,KAAJ,0BAAiCK,IAAjC,yBAAyDV,kBAAkBW,IAAlB,CAAuB,IAAvB,CAAzD,CAAN;AACD;AACF,CAJD;;AAMAV,QAAQW,cAAR,GAAyB,UAACC,EAAD,EAAKC,GAAL,EAAa;AACpC,MAAIA,QAAQ,IAAR,IAAgB,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAA/B,IAA2CC,MAAMC,OAAN,CAAcF,GAAd,CAA/C,EAAmE;AACjE,UAAM,IAAIT,KAAJ,CAAaQ,EAAb,sCAAN;AACD;AACF,CAJD;;AAMAZ,QAAQgB,kBAAR,GAA6B,UAACJ,EAAD,EAAKN,EAAL,EAAY;AACvC,MAAI,OAAOA,EAAP,KAAc,QAAd,IAA0B,CAAC,sCAAsCJ,IAAtC,CAA2CI,EAA3C,CAA/B,EAA+E;AAC7E,UAAM,IAAIF,KAAJ,CAAaQ,EAAb,oDAAN;AACD;AACF,CAJD;;AAMAZ,QAAQiB,UAAR,GAAqB,kBAAU;AAC7B,MAAI,CAACC,OAAOjB,OAAZ,EAAqB;AACnB,UAAM,IAAIG,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,SAAOc,OAAOjB,OAAd;AACD,CAND;;AAQAD,QAAQmB,OAAR,GAAkB;AAChBF,cAAY;AAAA,WAAU,IAAIG,OAAJ,CAAY;AAAA,aAAWC,QAAQrB,QAAQiB,UAAR,CAAmBC,MAAnB,CAAR,CAAX;AAAA,KAAZ,CAAV;AAAA;AADI,CAAlB","file":"validators.js","sourcesContent":["const VALID_ASSET_TYPES = ['image', 'file']\n\nexports.dataset = name => {\n  if (!/^[-\\w]{1,128}$/.test(name)) {\n    throw new Error('Datasets can only contain lowercase characters, numbers, underscores and dashes')\n  }\n}\n\nexports.projectId = id => {\n  if (!/^[-a-z0-9]+$/i.test(id)) {\n    throw new Error('`projectId` can only contain only a-z, 0-9 and dashes')\n  }\n}\n\nexports.validateAssetType = type => {\n  if (VALID_ASSET_TYPES.indexOf(type) === -1) {\n    throw new Error(`Invalid asset type: ${type}. Must be one of ${VALID_ASSET_TYPES.join(', ')}`)\n  }\n}\n\nexports.validateObject = (op, val) => {\n  if (val === null || typeof val !== 'object' || Array.isArray(val)) {\n    throw new Error(`${op}() takes an object of properties`)\n  }\n}\n\nexports.validateDocumentId = (op, id) => {\n  if (typeof id !== 'string' || !/^[-_a-z0-9]{1,128}\\/[-_a-z0-9\\/]+$/i.test(id)) {\n    throw new Error(`${op}() takes a document ID in format dataset/docId`)\n  }\n}\n\nexports.hasDataset = config => {\n  if (!config.dataset) {\n    throw new Error('`dataset` must be provided to perform queries')\n  }\n\n  return config.dataset\n}\n\nexports.promise = {\n  hasDataset: config => new Promise(resolve => resolve(exports.hasDataset(config)))\n}\n"]}
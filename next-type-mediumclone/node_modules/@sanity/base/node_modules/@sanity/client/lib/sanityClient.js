'use strict';

var assign = require('xtend/mutable');
var Patch = require('./data/patch');
var Transaction = require('./data/transaction');
var dataMethods = require('./data/dataMethods');
var DatasetsClient = require('./datasets/datasetsClient');
var ProjectsClient = require('./projects/projectsClient');
var AssetsClient = require('./assets/assetsClient');
var UsersClient = require('./users/usersClient');
var AuthClient = require('./auth/authClient');
var httpRequest = require('./http/request');
var getRequestOptions = require('./http/requestOptions');

var _require = require('./config');

var defaultConfig = _require.defaultConfig;
var initConfig = _require.initConfig;


function SanityClient() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultConfig;

  this.config(config);

  this.assets = new AssetsClient(this);
  this.datasets = new DatasetsClient(this);
  this.projects = new ProjectsClient(this);
  this.users = new UsersClient(this);
  this.auth = new AuthClient(this);
}

assign(SanityClient.prototype, dataMethods);
assign(SanityClient.prototype, {
  config: function config(newConfig) {
    if (typeof newConfig === 'undefined') {
      return this.clientConfig;
    }

    this.clientConfig = initConfig(newConfig, this.clientConfig || {});
    return this;
  },
  getUrl: function getUrl(uri) {
    return this.clientConfig.url + '/' + uri.replace(/^\//, '');
  },
  request: function request(options) {
    return this.requestObservable(options).toPromise();
  },
  clone: function clone(newConfig) {
    var mergedConfig = assign(this.config(), newConfig || {});
    return new SanityClient(mergedConfig);
  },
  requestObservable: function requestObservable(options) {
    return httpRequest(mergeOptions(getRequestOptions(this.clientConfig), options, { uri: this.getUrl(options.uri) }));
  }
});

// Merge http options and headers
function mergeOptions() {
  for (var _len = arguments.length, opts = Array(_len), _key = 0; _key < _len; _key++) {
    opts[_key] = arguments[_key];
  }

  var headers = opts.reduce(function (merged, options) {
    if (!merged && !options.headers) {
      return null;
    }
    return assign(merged || {}, options.headers || {});
  }, null);
  return assign.apply(undefined, opts.concat([headers ? { headers: headers } : {}]));
}

function createClient(config) {
  return new SanityClient(config);
}

createClient.Patch = Patch;
createClient.Transaction = Transaction;

module.exports = createClient;
//# sourceMappingURL=sanityClient.js.map
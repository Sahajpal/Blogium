{"version":3,"sources":["../src/config.js"],"names":["assign","require","validate","defaultConfig","exports","apiHost","useProjectHostname","initConfig","config","prevConfig","newConfig","projectBased","Promise","Error","projectId","dataset","hostParts","split","protocol","host","url"],"mappings":";;AAAA,IAAMA,SAASC,QAAQ,eAAR,CAAf;AACA,IAAMC,WAAWD,QAAQ,cAAR,CAAjB;;AAEA,IAAME,gBAAgBC,QAAQD,aAAR,GAAwB;AAC5CE,WAAS,uBADmC;AAE5CC,sBAAoB;AAFwB,CAA9C;;AAKAF,QAAQG,UAAR,GAAqB,UAACC,MAAD,EAASC,UAAT,EAAwB;AAC3C,MAAMC,YAAYV,OAAO,EAAP,EAAWG,aAAX,EAA0BM,UAA1B,EAAsCD,MAAtC,CAAlB;AACA,MAAMG,eAAeD,UAAUJ,kBAA/B;;AAEA,MAAI,OAAOM,OAAP,KAAmB,WAAvB,EAAoC;AAClC;AACA,UAAM,IAAIC,KAAJ,CAAU,2DAAV,CAAN;AACD;;AAED,MAAIF,gBAAgB,CAACD,UAAUI,SAA/B,EAA0C;AACxC,UAAM,IAAID,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,MAAIF,YAAJ,EAAkB;AAChBT,aAASY,SAAT,CAAmBJ,UAAUI,SAA7B;AACD;;AAED,MAAIJ,UAAUK,OAAd,EAAuB;AACrBb,aAASa,OAAT,CAAiBL,UAAUK,OAA3B;AACD;;AAED,MAAMC,YAAYN,UAAUL,OAAV,CAAkBY,KAAlB,CAAwB,KAAxB,EAA+B,CAA/B,CAAlB;AACA,MAAMC,WAAWF,UAAU,CAAV,CAAjB;AACA,MAAMG,OAAOH,UAAU,CAAV,CAAb;;AAEA,MAAIN,UAAUJ,kBAAd,EAAkC;AAChCI,cAAUU,GAAV,GAAmBF,QAAnB,WAAiCR,UAAUI,SAA3C,SAAwDK,IAAxD;AACD,GAFD,MAEO;AACLT,cAAUU,GAAV,GAAmBV,UAAUL,OAA7B;AACD;;AAED,SAAOK,SAAP;AACD,CAhCD","file":"config.js","sourcesContent":["const assign = require('xtend/mutable')\nconst validate = require('./validators')\n\nconst defaultConfig = exports.defaultConfig = {\n  apiHost: 'https://api.sanity.io',\n  useProjectHostname: true\n}\n\nexports.initConfig = (config, prevConfig) => {\n  const newConfig = assign({}, defaultConfig, prevConfig, config)\n  const projectBased = newConfig.useProjectHostname\n\n  if (typeof Promise === 'undefined') {\n    // @todo add help url?\n    throw new Error('No native `Promise`-implementation found, polyfill needed')\n  }\n\n  if (projectBased && !newConfig.projectId) {\n    throw new Error('Configuration must contain `projectId`')\n  }\n\n  if (projectBased) {\n    validate.projectId(newConfig.projectId)\n  }\n\n  if (newConfig.dataset) {\n    validate.dataset(newConfig.dataset)\n  }\n\n  const hostParts = newConfig.apiHost.split('://', 2)\n  const protocol = hostParts[0]\n  const host = hostParts[1]\n\n  if (newConfig.useProjectHostname) {\n    newConfig.url = `${protocol}://${newConfig.projectId}.${host}/v1`\n  } else {\n    newConfig.url = `${newConfig.apiHost}/v1`\n  }\n\n  return newConfig\n}\n"]}
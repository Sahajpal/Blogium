{"version":3,"sources":["../../src/assets/assetsClient.js"],"names":["assign","require","validators","AssetsClient","client","ASSET_TYPES_TO_ENDPOINT","image","file","prototype","upload","assetType","options","validateAssetType","dataset","hasDataset","clientConfig","customHeaders","contentType","assetEndpointSegment","requestObservable","method","headers","Accept","uri","body","json","timeout","map","event","type","JSON","parse","module","exports"],"mappings":";;AAAA,IAAMA,SAASC,QAAQ,eAAR,CAAf;AACA,IAAMC,aAAaD,QAAQ,eAAR,CAAnB;;AAEA,SAASE,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,OAAKA,MAAL,GAAcA,MAAd;AACD;;AAED,IAAMC,0BAA0B;AAC9BC,SAAO,QADuB;AAE9BC,QAAM;AAFwB,CAAhC;;AAKAP,OAAOG,aAAaK,SAApB,EAA+B;AAC7BC,QAD6B,kBACtBC,SADsB,EACXH,IADW,EACS;AAAA,QAAdI,OAAc,uEAAJ,EAAI;;AACpCT,eAAWU,iBAAX,CAA6BF,SAA7B;;AAEA,QAAMG,UAAUX,WAAWY,UAAX,CAAsB,KAAKV,MAAL,CAAYW,YAAlC,CAAhB;;AAEA,QAAMC,gBAAiB,iBAAiBL,OAAlB,GAClB,EAAC,gBAAgBA,QAAQM,WAAzB,EADkB,GAElB,EAFJ;;AAIA,QAAMC,uBAAuBb,wBAAwBK,SAAxB,CAA7B;;AAEA,WAAO,KAAKN,MAAL,CAAYe,iBAAZ,CAA8B;AACnCC,cAAQ,MAD2B;AAEnCC,eAASrB,OAAO;AACdsB,gBAAQ;AADM,OAAP,EAENN,aAFM,CAF0B;AAKnCO,wBAAgBL,oBAAhB,SAAwCL,OALL;AAMnCW,YAAMjB,IAN6B;AAOnCkB,YAAM,KAP6B;AAQnCC,eAAS;AAR0B,KAA9B,EAUJC,GAVI,CAUA,iBAAS;AACZ,UAAIC,MAAMC,IAAN,KAAe,UAAnB,EAA+B;AAC7B,eAAOD,KAAP;AACD;AACD,aAAO5B,OAAO,EAAP,EAAW4B,KAAX,EAAkB;AACvBJ,cAAMM,KAAKC,KAAL,CAAWH,MAAMJ,IAAjB;AADiB,OAAlB,CAAP;AAGD,KAjBI,CAAP;AAkBD;AA9B4B,CAA/B;;AAiCAQ,OAAOC,OAAP,GAAiB9B,YAAjB","file":"assetsClient.js","sourcesContent":["const assign = require('xtend/mutable')\nconst validators = require('../validators')\n\nfunction AssetsClient(client) {\n  this.client = client\n}\n\nconst ASSET_TYPES_TO_ENDPOINT = {\n  image: 'images',\n  file: 'files'\n}\n\nassign(AssetsClient.prototype, {\n  upload(assetType, file, options = {}) {\n    validators.validateAssetType(assetType)\n\n    const dataset = validators.hasDataset(this.client.clientConfig)\n\n    const customHeaders = ('contentType' in options)\n      ? {'Content-Type': options.contentType}\n      : {}\n\n    const assetEndpointSegment = ASSET_TYPES_TO_ENDPOINT[assetType]\n\n    return this.client.requestObservable({\n      method: 'POST',\n      headers: assign({\n        Accept: 'application/json',\n      }, customHeaders),\n      uri: `/assets/${assetEndpointSegment}/${dataset}`,\n      body: file,\n      json: false,\n      timeout: 0\n    })\n      .map(event => {\n        if (event.type !== 'response') {\n          return event\n        }\n        return assign({}, event, {\n          body: JSON.parse(event.body)\n        })\n      })\n  }\n})\n\nmodule.exports = AssetsClient\n"]}
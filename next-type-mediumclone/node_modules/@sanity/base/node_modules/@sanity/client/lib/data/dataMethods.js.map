{"version":3,"sources":["../../src/data/dataMethods.js"],"names":["assign","require","validators","encodeQueryString","Transaction","Patch","getMutationQuery","returnIDs","options","returnDocuments","getQuerySizeLimit","module","exports","fetch","query","params","dataRequest","then","res","result","getDocument","id","request","uri","json","documents","create","doc","_create","createIfNotExists","createOrReplace","patch","selector","operations","delete","documentId","validateDocumentId","mutations","mutate","mut","serialize","muts","Array","isArray","transaction","endpoint","body","isMutation","strQuery","useGet","length","stringQuery","returnFirst","promise","hasDataset","clientConfig","method","dataset","undefined","results","document","map","key","ids","transactionId","transactionID","op","mutation","_id","opts"],"mappings":"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","file":"dataMethods.js","sourcesContent":["const assign = require('xtend/mutable')\nconst validators = require('../validators')\nconst encodeQueryString = require('./encodeQueryString')\nconst Transaction = require('./transaction')\nconst Patch = require('./patch')\n\nconst getMutationQuery = options => assign(\n  // Always return IDs\n  {returnIDs: true},\n\n  // Allow user to disable returning documents\n  options.returnDocuments === false ? {} : {returnDocuments: true}\n)\n\nconst getQuerySizeLimit = 1948\n\nmodule.exports = {\n  fetch(query, params) {\n    return this.dataRequest('query', {query, params}).then(res => res.result || [])\n  },\n\n  getDocument(id) {\n    return this.request({\n      uri: `/data/doc/${id}`,\n      json: true\n    }).then(res => res.documents && res.documents[0])\n  },\n\n  create(doc, options) {\n    return this._create(doc, 'create', options)\n  },\n\n  createIfNotExists(doc, options) {\n    return this._create(doc, 'createIfNotExists', options)\n  },\n\n  createOrReplace(doc, options) {\n    return this._create(doc, 'createOrReplace', options)\n  },\n\n  patch(selector, operations) {\n    return new Patch(selector, operations, this)\n  },\n\n  delete(documentId) {\n    validators.validateDocumentId('delete', documentId)\n    return this.dataRequest('mutate', {mutations: [{delete: {id: documentId}}]})\n  },\n\n  mutate(mutations, options) {\n    const mut = mutations instanceof Patch\n      ? mutations.serialize()\n      : mutations\n    const muts = Array.isArray(mut) ? mut : [mut]\n\n    return this.dataRequest('mutate', {mutations: muts}, options)\n  },\n\n  transaction(operations) {\n    return new Transaction(operations, this)\n  },\n\n  dataRequest(endpoint, body, options = {}) {\n    const isMutation = endpoint === 'mutate'\n\n    // Check if the query string is within a configured threshold,\n    // in which case we can use GET. Otherwise, use POST.\n    const strQuery = !isMutation && encodeQueryString(body)\n    const useGet = !isMutation && strQuery.length < getQuerySizeLimit\n    const stringQuery = useGet ? strQuery : ''\n    const returnFirst = options.returnFirst\n\n    return validators.promise.hasDataset(this.clientConfig)\n      .then(dataset => this.request({\n        method: useGet ? 'GET' : 'POST',\n        uri: `/data/${endpoint}/${dataset}${stringQuery}`,\n        json: true,\n        body: useGet ? undefined : body,\n        query: isMutation && getMutationQuery(options)\n      }))\n      .then(res => {\n        if (!isMutation) {\n          return res\n        }\n\n        const results = res.results || []\n        if (options.returnDocuments) {\n          return returnFirst\n            ? results[0] && results[0].document\n            : results.map(mut => mut.document)\n        }\n\n        // Only return IDs\n        const key = returnFirst ? 'documentId' : 'documentIds'\n        const ids = returnFirst ? results[0] && results[0].id : results.map(mut => mut.id)\n        return {transactionId: res.transactionID, [key]: ids}\n      })\n  },\n\n  _create(doc, op, options = {}) {\n    const dataset = validators.hasDataset(this.clientConfig)\n    const mutation = {[op]: assign({}, doc, {_id: doc._id || `${dataset}/`})}\n    const opts = assign({returnFirst: true, returnDocuments: true}, options)\n    return this.dataRequest('mutate', {mutations: [mutation]}, opts)\n  }\n}\n"]}
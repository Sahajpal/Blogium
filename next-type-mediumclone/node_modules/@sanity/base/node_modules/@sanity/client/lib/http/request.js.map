{"version":3,"sources":["../../src/http/request.js"],"names":["request","require","queryString","Observable","debug","process","env","DEBUG","indexOf","log","NODE_ENV","module","exports","httpRequest","options","query","uri","stringify","method","body","JSON","observable","req","err","res","observer","error","statusCode","stringifyBody","isHttpError","msg","errors","map","message","concat","filter","Boolean","join","Error","httpError","responseBody","httpErr","next","type","complete","upload","onprogress","handleProgress","onabort","abort","stage","percent","event","lengthComputable","loaded","total","toPromise","last","forEach","value","then","statusMessage","contentType","headers","toLowerCase","isJson"],"mappings":"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","file":"request.js","sourcesContent":["/* eslint-disable no-empty-function, no-process-env */\nconst request = require('@sanity/request') // `request` in node, `xhr` in browsers\nconst queryString = require('./queryString')\nconst Observable = require('zen-observable')\n\nconst debug = (process.env.DEBUG || '').indexOf('sanity') !== -1\n\nlet log = () => {}\nif (process.env.NODE_ENV !== 'production') {\n  log = require('debug')('sanity:client')\n}\n\nmodule.exports = function httpRequest(options) {\n  if (options.query) {\n    options.uri += `?${queryString.stringify(options.query)}`\n  }\n\n  if (debug) {\n    log('HTTP %s %s', options.method || 'GET', options.uri)\n    if (options.method === 'POST' && options.body) {\n      log('Request body: %s', JSON.stringify(options.body, null, 2))\n    }\n  }\n\n  const observable = new Observable(observer => {\n    const req = request(options, (err, res, body) => {\n      if (err) {\n        observer.error(err)\n        return\n      }\n\n      log('Response code: %s', res.statusCode)\n      if (debug && body) {\n        log('Response body: %s', stringifyBody(body, res))\n      }\n\n      const isHttpError = res.statusCode >= 400\n\n      if (isHttpError && body) {\n        const msg = (body.errors ? body.errors.map(error => error.message) : [])\n          .concat([body.error, body.message]).filter(Boolean).join('\\n')\n\n        const error = new Error(msg || httpError(res))\n        error.responseBody = stringifyBody(body, res)\n        error.statusCode = res.statusCode\n        observer.error(error)\n        return\n      } else if (isHttpError) {\n        const httpErr = new Error(httpError(res))\n        httpErr.statusCode = res.statusCode\n        observer.error(httpErr)\n        return\n      }\n\n      observer.next({type: 'response', body})\n      observer.complete()\n    })\n\n    // Todo: shim over node/browser differences\n    if ('upload' in req && 'onprogress' in req.upload) {\n      req.upload.onprogress = handleProgress('upload')\n    }\n\n    if ('onprogress' in req) {\n      req.onprogress = handleProgress('download')\n    }\n\n    req.onabort = () => {\n      observer.next({type: 'abort'})\n      observer.complete()\n    }\n\n    return () => req.abort()\n\n    function handleProgress(stage) {\n      return event => {\n        const percent = event.lengthComputable ? event.loaded / event.total : -1\n        observer.next({\n          type: 'progress',\n          stage,\n          percent\n        })\n      }\n    }\n  })\n\n  observable.toPromise = () => {\n    let last\n    return observable\n      .forEach(value => {\n        last = value\n      })\n      .then(() => last.body)\n  }\n  return observable\n}\n\nfunction httpError(res) {\n  return `Server responded with HTTP ${res.statusCode} ${res.statusMessage || ''}, no description`\n}\n\nfunction stringifyBody(body, res) {\n  const contentType = (res.headers['content-type'] || '').toLowerCase()\n  const isJson = contentType.indexOf('application/json') !== -1\n  return isJson ? JSON.stringify(body, null, 2) : body\n}\n"]}
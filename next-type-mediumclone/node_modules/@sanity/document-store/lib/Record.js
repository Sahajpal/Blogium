'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require('rxjs');

var Subject = _require.Subject;
var Observable = _require.Observable;

var applyPatch = require('./utils/applyPatch');
var pubsubber = require('./utils/pubsubber');

var Record = function () {
  function Record(snapshot) {
    _classCallCheck(this, Record);

    this._snapshot = snapshot;
    this._pubsub = pubsubber();
  }

  _createClass(Record, [{
    key: 'delete',
    value: function _delete() {
      this._snapshot = null;
      this.publish({ type: 'delete', document: null });
    }
  }, {
    key: 'update',
    value: function update(patch) {
      this.publish({ type: 'update', patch: patch });
      this._snapshot = applyPatch(this._snapshot, patch);
      this.publishSnapshot();
    }
  }, {
    key: 'replace',
    value: function replace(doc) {
      this.publish({ type: 'replace', document: doc });
      if (doc.id !== this.snapshot.id) {
        throw new Error('Id mismatch when replacing document #' + this.snapshot.id + '. Wrong id: ' + doc.id);
      }
      this._snapshot = doc;
      this.publishSnapshot();
    }

    // receive an sync event from server

  }, {
    key: 'sync',
    value: function sync(document) {
      this._snapshot = document;
      this.publishSnapshot();
    }
  }, {
    key: 'publish',
    value: function publish(ev) {
      this._pubsub.publish(ev);
    }
  }, {
    key: 'publishSnapshot',
    value: function publishSnapshot() {
      this.publish({ type: 'snapshot', document: this._snapshot });
    }
  }, {
    key: 'snapshot',
    get: function get() {
      return this._snapshot;
    }
  }, {
    key: 'id',
    get: function get() {
      return this._snapshot.id;
    }
  }, {
    key: 'events',
    get: function get() {
      var _this = this;

      return new Observable(function (observer) {
        if (_this._snapshot) {
          observer.next({ type: 'snapshot', document: _this._snapshot });
        }
        return _this._pubsub.subscribe(function (ev) {
          return observer.next(ev);
        });
      });
    }
  }]);

  return Record;
}();

Record.create = function create(snapshot) {
  return new Record(snapshot);
};

module.exports = Record;
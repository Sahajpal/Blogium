'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _require = require('rxjs');

var Observable = _require.Observable;

var createCache = require('./utils/createCache');
var createEvent = require('./utils/createEvent');
var canonicalize = require('./utils/canonicalize');

var Record = require('./Record');

var identity = function identity(val) {
  return val;
};

module.exports = function createDocumentStore(_ref) {
  var serverConnection = _ref.serverConnection;

  var RECORDS_CACHE = createCache();

  var server = {
    byId: canonicalize(identity, serverConnection.byId),
    query: canonicalize(identity, serverConnection.query),
    update: serverConnection.update
  };

  return {
    byId: byId,
    byIds: byIds,
    query: query,
    create: create,
    // replace,
    // createOrReplace,
    update: update
  };

  function update(documentId, patch) {
    if (RECORDS_CACHE.has(documentId)) {
      // Update the local cache if we have it
      // If we don't have it, that means nothing is interested in its state
      var record = RECORDS_CACHE.get(documentId);
      record.update(patch);
    }
    return patch.local ? Observable.of({ ok: true }) : server.update(documentId, patch);
  }

  function byId(documentId) {

    var record = RECORDS_CACHE.fetch(documentId, function () {
      return Record.create();
    });

    return new Observable(function (observer) {

      // Listen for changes in document on server
      var serverSubscription = server.byId(documentId).subscribe(function (event) {
        if (event.type === 'snapshot') {
          record.sync(event.document);
        }
        if (event.type === 'update') {
          record.update(event.patch);
        }
      });

      var eventsSubscription = record.events.subscribe(observer);
      return function () {
        eventsSubscription.unsubscribe();
        serverSubscription.unsubscribe();
      };
    });
  }

  function byIds(documentIds) {
    return Observable.merge.apply(Observable, _toConsumableArray(documentIds.map(byId)));
  }

  function query(query, params) {
    return Observable.from(serverConnection.query(query, params));
  }
  function create(document) {
    return Observable.from(serverConnection.create(document));
  }
};
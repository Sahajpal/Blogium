'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ = require('../');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var didWarn = false;
function validateProps(props) {
  if (didWarn) {
    return;
  }
  if (props.state && props.location) {
    // eslint-disable-next-line no-console
    console.error(new Error("[Warning] You passed both state and location to RouterProvider. If you pass 'state' you don't need to pass 'location' and vice versa"));
    didWarn = true;
  }
}

var RouterProvider = function (_React$Component) {
  _inherits(RouterProvider, _React$Component);

  function RouterProvider(props) {
    var _ref;

    _classCallCheck(this, RouterProvider);

    for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = RouterProvider.__proto__ || Object.getPrototypeOf(RouterProvider)).call.apply(_ref, [this, props].concat(rest)));

    _this.navigateUrl = _this.navigateUrl.bind(_this);
    _this.navigateState = _this.navigateState.bind(_this);
    _this.resolvePathFromState = _this.resolvePathFromState.bind(_this);
    validateProps(props);
    return _this;
  }

  _createClass(RouterProvider, [{
    key: 'navigateUrl',
    value: function navigateUrl(url) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var replace = _ref2.replace;
      var onNavigate = this.props.onNavigate;

      onNavigate(url, { replace: replace });
    }
  }, {
    key: 'navigateState',
    value: function navigateState(nextState) {
      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var replace = _ref3.replace;

      this.navigateUrl(this.resolvePathFromState(nextState), { replace: replace });
    }
  }, {
    key: 'resolvePathFromState',
    value: function resolvePathFromState(state) {
      return (0, _.resolvePathFromState)(this.props.router, state);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      validateProps(nextProps);
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      var _props = this.props;
      var router = _props.router;
      var location = _props.location;
      var state = _props.state;

      return {
        __internalRouter: {
          resolvePathFromState: this.resolvePathFromState,
          navigateUrl: this.navigateUrl
        },
        router: {
          navigate: this.navigateState,
          state: state || (0, _.resolveStateFromPath)(router, location.pathname)
        }
      };
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children;
    }
  }]);

  return RouterProvider;
}(_react2.default.Component);

exports.default = RouterProvider;

RouterProvider.propTypes = {
  state: _react.PropTypes.object,
  children: _react.PropTypes.node,
  router: _react.PropTypes.object,
  onNavigate: _react.PropTypes.func,
  location: _react.PropTypes.shape({
    pathname: _react.PropTypes.string
  })
};
RouterProvider.childContextTypes = {
  __internalRouter: _react.PropTypes.object,
  router: _react.PropTypes.object
};
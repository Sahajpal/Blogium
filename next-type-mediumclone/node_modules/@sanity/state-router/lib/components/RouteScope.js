'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RouteScope = function (_React$Component) {
  _inherits(RouteScope, _React$Component);

  function RouteScope() {
    _classCallCheck(this, RouteScope);

    return _possibleConstructorReturn(this, (RouteScope.__proto__ || Object.getPrototypeOf(RouteScope)).apply(this, arguments));
  }

  _createClass(RouteScope, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var scope = this.props.scope;
      var _context = this.context;
      var router = _context.router;
      var __internalRouter = _context.__internalRouter;

      return {
        __internalRouter: {
          resolvePathFromState: function resolvePathFromState(nextState) {
            return __internalRouter.resolvePathFromState(getUnscopedState(nextState));
          },
          navigateUrl: __internalRouter.navigateUrl
        },
        router: {
          navigate: function navigate(nextState, options) {
            router.navigate(getUnscopedState(nextState), options);
          },
          state: router.state[scope] || {}
        }
      };

      function getUnscopedState(nextState) {
        return Object.assign({}, router.state, _defineProperty({}, scope, nextState));
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children;
    }
  }]);

  return RouteScope;
}(_react2.default.Component);

exports.default = RouteScope;


RouteScope.propTypes = {
  scope: _react.PropTypes.string
};

RouteScope.childContextTypes = RouteScope.contextTypes = {
  __internalRouter: _react.PropTypes.object,
  router: _react.PropTypes.object
};
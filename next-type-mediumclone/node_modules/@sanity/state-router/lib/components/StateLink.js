'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _Link = require('./Link');

var _Link2 = _interopRequireDefault(_Link);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EMPTY_STATE = {};

var StateLink = function (_React$Component) {
  _inherits(StateLink, _React$Component);

  function StateLink() {
    _classCallCheck(this, StateLink);

    return _possibleConstructorReturn(this, (StateLink.__proto__ || Object.getPrototypeOf(StateLink)).apply(this, arguments));
  }

  _createClass(StateLink, [{
    key: 'resolveUrl',
    value: function resolveUrl() {
      var _props = this.props;
      var toIndex = _props.toIndex;
      var state = _props.state;


      if (state && toIndex) {
        throw new Error('Passing both `state` and `toIndex` as props to StateLink is invalid');
      }

      if (!state && !toIndex) {
        console.error(new Error('No state passed to StateLink. If you want to link to an empty state, its better to use the the `toIndex` property'));
      }
      var nextState = toIndex ? EMPTY_STATE : state || EMPTY_STATE;

      return this.context.__internalRouter.resolvePathFromState(nextState);
    }
  }, {
    key: 'render',
    value: function render() {
      var rest = (0, _omit2.default)(this.props, 'state', 'toIndex');
      return _react2.default.createElement(_Link2.default, _extends({ href: this.resolveUrl() }, rest));
    }
  }]);

  return StateLink;
}(_react2.default.Component);

exports.default = StateLink;


StateLink.defaultProps = {
  replace: false,
  toIndex: false
};
StateLink.propTypes = {
  state: _react.PropTypes.object,
  replace: _react.PropTypes.bool
};
StateLink.contextTypes = {
  __internalRouter: _react.PropTypes.object
};
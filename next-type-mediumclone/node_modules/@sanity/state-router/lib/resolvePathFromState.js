'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolvePathFromState;

var _flatten = require('lodash/flatten');

var _flatten2 = _interopRequireDefault(_flatten);

var _difference = require('lodash/difference');

var _difference2 = _interopRequireDefault(_difference);

var _extractParams = require('./utils/extractParams');

var _extractParams2 = _interopRequireDefault(_extractParams);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function insertParams(pattern, params, splat) {
  if (!pattern) {
    return [];
  }
  return (0, _flatten2.default)(pattern.split('/').filter(Boolean).map(function (segment) {
    if (segment.startsWith(':')) {
      var paramName = segment.substring(1);
      return params[paramName];
    }
    if (segment === '*') {
      return splat;
    }
    return segment;
  })).filter(Boolean);
}

function _resolvePath(routeNode, state) {
  if (routeNode.isScope) {
    return _resolvePath(routeNode.node, state[routeNode.name]);
  }

  var requiredParams = (0, _extractParams2.default)(routeNode.pattern);
  var missingParams = (0, _difference2.default)(requiredParams, Object.keys(state || {}));

  if (missingParams.length > 0) {
    return null;
  }

  var childPath = null;
  routeNode.children(state).some(function (childNode) {
    childPath = _resolvePath(childNode, state);
    return !!childPath;
  });

  return insertParams(routeNode.pattern, state).concat(childPath || []).join('/');
}

function resolvePathFromState(routeNode, state) {
  return '/' + (_resolvePath(routeNode, state) || '');
}
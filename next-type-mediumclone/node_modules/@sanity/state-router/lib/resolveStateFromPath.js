'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveStateFromPath;

var _httpHash = require('http-hash');

var _httpHash2 = _interopRequireDefault(_httpHash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function resolveStateFromPath(routeNode, path) {
  var result = {};
  var hash = (0, _httpHash2.default)();
  hash.set(routeNode.pattern, routeNode);
  var match = hash.get(path);

  if (!match.handler) {
    return {};
  }

  Object.assign(result, match.params);

  if (match.splat != null) {
    (function () {
      // get matching child routes
      var childRoutes = (0, _httpHash2.default)();
      var childRouteNodes = routeNode.children(match.params);
      childRouteNodes.forEach(function (childRouteNode) {
        var pattern = (childRouteNode.isScope ? childRouteNode.node : childRouteNode).pattern;
        childRoutes.set(pattern, childRouteNode);
      });
      var childMatch = childRoutes.get(match.splat || '/');

      if (childMatch.handler) {
        var childNode = childMatch.handler;

        var childState = childNode.isScope ? _defineProperty({}, childNode.name, resolveStateFromPath(childNode.node, match.splat)) : resolveStateFromPath(childNode, match.splat);

        Object.assign(result, childState);
      }
    })();
  }
  return result;
}